type: PythonCodeQuestion
id: slope_tough
access_rules:
    add_permissions:
        - change_answer
value: 1
timeout: 10


prompt: |
    # Introduction to the slope of a line - II

    Now that you are familiar with the concept of slope, let us try a tough
    one. The answer has to be correct within 0.1 of the actual answer.


setup_code: |
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.ticker import MultipleLocator

    x = np.linspace(42, 52)
    slope = 1.72
    y = slope*x + 17  # choosing an intercept of 17

    fig, ax = plt.subplots()
    ax.plot(x, y)

    ax.xaxis.set_major_locator(MultipleLocator(1))
    ax.xaxis.set_minor_locator(MultipleLocator(0.1))
    ax.yaxis.set_major_locator(MultipleLocator(1))
    ax.yaxis.set_minor_locator(MultipleLocator(0.1))

    plt.grid(b=True, which='major', color='k', linestyle='-', lw=0.2)
    plt.grid(b=True, which='minor', color='k', linestyle='--', lw=0.1)

    # plotting the line
    plt.plot(x, y, color='r')

    plt.xlabel('X')
    plt.ylabel('Y')
    plt.axis('equal')
    plt.title('A line with slope ???')
    plt.show()


names_from_user: [slope]

test_code: |

    if not isinstance(slope, float):
        feedback.finish(0, "Your computed slope is not a decimal.")
    correct_slope = 1.72
    rel_err = abs(correct_slope-slope)/abs(correct_slope)
    if rel_err < 0.1:
        feedback.finish(1, "Your computed slope was correct. Well done!")
    else:
        feedback.finish(0, "Your computed slope was incorrect.")






correct_code: |
    slope = 1.72





initial_code: |
    # Enter your slope value here.
    slope = ...

