type: PythonCodeQuestion
id: a_tale_of_two_slopes
access_rules:
    add_permissions:
        - change_answer
value: 1
timeout: 10


prompt: |
    # Introduction to the slope of a line - III
    Calculate the slopes of two different sections of a line shown below.

setup_code: |
    import numpy as np
    import matplotlib.pyplot as plt
    from matplotlib.ticker import MultipleLocator

    def process_answer(question_version, dummy_slope_left, dummy_slope_right):

        np.random.seed(question_version)

        # adding some restrictions just to make the plots pretty
        # do I get rid of there?
        slope = np.random.randint(-8, 8)
        to_reciprocate = np.random.randint(0, 1)
        if to_reciprocate:
            slope = 1.0/slope

        x1 = np.random.randint(0, 5)
        if x1 <3:
            x2 = x1 + np.random.randint(2, 5-x1)
        else:
            x2 = x1 - np.random.randint(2, x1)
        x1, x2 = min(x1, x2), max(x1, x2)

        x3 = np.random.randint(5, 10)
        if x3 <8:
            x4 = x3 + np.random.randint(2, 10-x3)
        else:
            x4 = x3 - np.random.randint(2, x3-5)
        x3, x4 = min(x3, x4), max(x3, x4)

        x = np.linspace(0, 10)
        y = slope*x

        fig, ax = plt.subplots(figsize=(12,12))
        ax.plot(x, y)

        ax.xaxis.set_major_locator(MultipleLocator(2))
        ax.xaxis.set_minor_locator(MultipleLocator(1))
        ax.yaxis.set_major_locator(MultipleLocator(2))
        ax.yaxis.set_minor_locator(MultipleLocator(1))

        plt.grid(b=True, which='major', color='k', linestyle='-', lw=0.2)
        plt.grid(b=True, which='minor', color='k', linestyle='--', lw=0.2)

        # plotting the line
        plt.plot(x, y, color='r')

        # plotting the line parallel to x-axis
        plt.plot(np.linspace(x1, x2, 100), slope*x1**np.ones(100))
        plt.plot(np.linspace(x3, x4, 100), slope*x3*np.ones(100))
        # plotting the line parallel to y-axis
        plt.plot(x2*np.ones(100), np.linspace(slope*x1, slope*x2, 100))
        plt.plot(x4*np.ones(100), np.linspace(slope*x3, slope*x4, 100))

        # highlighting the points of intersection
        plt.scatter([x1, x2], [slope*x1, slope*x2])
        plt.scatter([x3, x4], [slope*x3, slope*x4])

        plt.xlabel('X')
        plt.ylabel('Y')
        plt.axis('equal')
        plt.title('Calculate the slopes of the two parts of the line.')
        plt.show()

names_for_user: [process_answer]
names_from_user: [question_version, slope_left, slope_right]

test_code: |
    np.random.seed(question_version)

    correct_slope = np.random.randint(-8, 8)
    to_reciprocate = np.random.randint(0, 1)
    if to_reciprocate:
        correct_slope = 1.0/correct_slope

    if not isinstance(slope_left, (int, float)):
        feedback.finish(0, "Your computed slope_left is not a decimal.")
    if not isinstance(slope_right, (int, float)):
        feedback.finish(0, "Your computed slope_right is not a decimal.")
    
    if abs(correct_slope) < 0.1:
        err1 = abs(correct_slope-slope_left)
        err2 = abs(correct_slope-slope_right)
    else:
        err1 = abs(correct_slope-slope_left)/abs(correct_slope)
        err2 = abs(correct_slope-slope_right)/abs(correct_slope)
    if err1 < 0.1 and err2 < 0.1:
        feedback.finish(1, "Your computed slopes are correct. Well done!")
    else:
        feedback.finish(0, "Your computed slopes were incorrect.")


initial_code: |
    question_version = 1
    # Enter your slope value here.
    slope_left = ...
    slope_right = ...

    process_answer(question_version, slope_left, slope_right)
